name: ci

on: [push]

jobs:
  test-config:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix:
        home-assistant-version: [0.102.1]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@v1
      id: docker-cache
      with:
        path: docker-cache
        key: ${{ runner.os }}-docker-${{ matrix.home-assistant-version }}
        restore-keys: |
          ${{ runner.os }}-docker-
    - name: Load cached Docker layers
      run: |
        if [ -d "docker-cache" ]; then
          cat docker-cache/x* > image.tar
          docker load < image.tar
          rm -fr docker-cache
        fi
    - name: Build image
      if: steps.docker-cache.outputs.cache-hit != 'true'
      run: |
        docker pull homeassistant/home-assistant:${{ matrix.home-assistant-version }}
        docker save homeassistant/home-assistant:${{ matrix.home-assistant-version }} $(docker history -q homeassistant/home-assistant:${{ matrix.home-assistant-version }} | awk '!/<missing>/{print}') > image.tar
        mkdir docker-cache
        split -b 100m image.tar docker-cache/x
    - name: Tag cached image as scratch
      run: |
        docker rmi scratch
        docker tag homeassistant/home-assistant:${{ matrix.home-assistant-version }} scratch
    - name: Test config
      env:
        ALARM_PASSWORD: ""
        ALARM_PLATFORM: alarmdotcom
        ALARM_USERNAME: ""
        API_PASSWORD: ""
        APPLETV_LOGIN_ID: ""
        BEDROOM_APPLE_TV_IP: ""
        BEDROOM_TV_IP: ""
        BEDROOM_TV_MAC: ""
        CAMERA_DASH: http://example.com
        CAMERA_URL_1: http://example.com
        CAMERA_URL_2: http://example.com
        CAMERA_URL_3: http://example.com
        CAMERA_URL_4: http://example.com
        CAMERA_URL_5: http://example.com
        CAMERA_URL_6: http://example.com
        CAMERA_URL_7: http://example.com
        CAMERA_URL_8: http://example.com
        CAMERA_URL_9: http://example.com
        CLIMATE_DASH: http://example.com
        DB_URL: ""
        DESK_HID_IDLE_TIME_RESOURCE: http://example.com
        DESK_CAMERA_RESOURCE: http://example.com
        ELEVATION: 0
        FORECAST_API_KEY: ""
        GATEWAY_LINK: http://example.com
        GRAFANA_LINK: http://example.com
        GRAPHITE_LINK: http://example.com
        IFTTT_KEY: ""
        JESSE_MUSIC_ROOM_IP: "0.0.0.0"
        JPHONE_PUSH_TARGET: ""
        KITCHEN_LAT: 0
        KITCHEN_LONG: 0
        LAT: 0
        LETSENCRYPT_EMAIL: ""
        LETSENCRYPT_HOST: ""
        LIVING_LAT: 0
        LIVING_LONG: 0
        LONG: 0
        MASTER_LAT: 0
        MASTER_LONG: 0
        MOTION_LINK: http://example.com
        MPR_API_IP: ""
        MPR_API_PORT: 1
        MYQ_PASSWORD: ""
        MYQ_USERNAME: ""
        OFFICE_APPLE_TV_IP: ""
        OFFICE_LAT: 0
        OFFICE_LONG: 0
        OFFICE_TV_IP: ""
        OFFICE_TV_MAC: ""
        ROOMBA_IP: "0.0.0.0"
        ROOMBA_BLID: ""
        ROOMBA_PASSWORD: ""
        ROUTER_LINK: http://example.com
        SELF_LINK: http://example.com
        SLACK_API_KEY: ""
        SMOKEPING_LINK: http://example.com
        SSL_CERTIFICATE: cert.pem
        SSL_KEY: key.pem
        TRUSTED_NETWORK_1: 0.0.0.0/0
        TRUSTED_NETWORK_2: 0.0.0.0/0
        TRUSTED_NETWORK_3: 0.0.0.0/0
        UNIFI_IP: 0.0.0.0
        UNIFI_USERNAME: foo
        UNIFI_PASSWORD: bar
        UNIFI_PORT: "8443"
        VERA_LINK: http://example.com
        VERA_URL: http://example.com
        VIRTUAL_HOST: example.com
        VIRTUAL_NETWORK: ""
        VIRTUAL_PORT: ""
      uses: docker://scratch
      run: |
        openssl req -x509 -newkey rsa:1024 -subj '/CN=example.com' -nodes -keyout key.pem -out cert.pem && \
        ./script/cibuild
    # TODO
    # - name: Create deployment object
    #   run: |
    #     curl \
    #       -H 'Content-Type: application/json' \
    #       -H 'Authorization: token ${GITHUB_TOKEN}' \
    #       -H 'Accept: application/vnd.github.ant-man-preview+json' \
    #       -X POST \
    #       --data '{"ref":"${GITHUB_REF}"}' \
    #       https://api.github.com/repos/${GITHUB_REPOSITORY}/deployments | \
    #       tee $HOME/deployment
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # - name: Ask home-assistant to deploy
    #   run: |
    #     curl -X POST -H "Content-Type: application/json" -H "x-ha-access: $HA_PASSWORD" "$HA_SERVICE"
    #   env:
    #     HA_PASSWORD: ${{secrets.HA_PASSWORD}}
    #     HA_SERVICE: ${{secrets.HA_SERVICE}}
    # TODO
    # "complete" the deployment when home-assistant starts up at the new version
