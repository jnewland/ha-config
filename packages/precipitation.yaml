homeassistant:
  customize:
    binary_sensor.precipitation_in_forecast:
      icon: mdi:weather-rainy
    sensor.precipitation_in_forecast:
      icon: mdi:weather-rainy

automation:
  - alias: Precipitation notifications
    id: adeaa17d-9184-4cd4-9086-47dcc8817b71
    trigger:
    - platform: state
      entity_id: binary_sensor.precipitation_in_forecast
      from: "on"
      to: "off"
    condition: |
      {{ states('device_tracker.jphone_14') != 'not_home' }}
    action:
      - service: script.ask_about_turning_on
        data:
          service: notify.mobile_app_jphone_14
          notify_service: notify.mobile_app_jphone_14
          entity_id: script.noop
          tag: precipitation
          message: Rain is forecasted soon. Prep for rain?
          confirmation_message: prepped for rain, cool.
  - alias: Sunshine notifications
    id: ad844a6c-87f8-4e72-9839-9af40bd4c500
    trigger:
    - platform: state
      entity_id: binary_sensor.precipitation_in_forecast
      from: "off"
      to: "on"
    condition: |
      {{ states('device_tracker.jphone_14') != 'not_home' }}
    action:
      - service: script.ask_about_turning_on
        data:
          service: notify.mobile_app_jphone_14
          notify_service: notify.mobile_app_jphone_14
          entity_id: script.noop
          tag: precipitation
          message: No rain in the forecast. Prep for sunshine?
          confirmation_message: prepped for sunshine, cool.

input_number:
  precipitation_forecast_hours:
    name: Precipitation forecast hours
    min: 4
    max: 48
    step: 1

binary_sensor:
  - platform: template
    sensors:
      precipitation_in_forecast:
        friendly_name: Precipitation in forecast
        value_template: |
          {% set next_precip = state_attr("weather.dark_sky", "forecast") |
                      default([{}]) |
                      rejectattr("precipitation", "none") |
                      rejectattr("precipitation", "undefined") |
                      map(attribute='datetime') |
                      first |
                      default(false) %}
          {% set next_rainy = state_attr("weather.dark_sky", "forecast") |
                      default([{}]) |
                      selectattr("condition", "==", "rainy") |
                      map(attribute='datetime') |
                      first |
                      default(false) %}
          {{ True if next_precip or next_rainy else False }}
        delay_on:
          minutes: 30
        delay_off:
          minutes: 30
sensor:
  - platform: template
    sensors:
      precipitation_in_forecast:
        friendly_name: Precipitation in forecast
        unit_of_measurement: 'in'
        value_template: |
          {{
            state_attr("weather.dark_sky", "forecast") |
            default([{}]) | batch(states("input_number.precipitation_forecast_hours") | default(12)) | first |
            rejectattr("precipitation", "none") |
            rejectattr("precipitation", "undefined") |
            sum(attribute="precipitation")
          }}
      next_precipitation:
        friendly_name: Next precipitation
        unit_of_measurement: timestamp
        value_template: |
          {% set next_precip = state_attr("weather.dark_sky", "forecast") |
                      default([{}]) |
                      rejectattr("precipitation", "none") |
                      rejectattr("precipitation", "undefined") |
                      map(attribute='datetime') |
                      first |
                      default(false) %}
          {% set next_rainy = state_attr("weather.dark_sky", "forecast") |
                      default([{}]) |
                      selectattr("condition", "==", "rainy") |
                      map(attribute='datetime') |
                      first |
                      default(false) %}
          {{ next_precip or next_rainy or "" }}
      hours_until_rain:
        friendly_name: Hours until rain
        unit_of_measurement: 'hours'
        value_template: |
          {% if states('sensor.next_precipitation') == 'unavailable' or states('sensor.next_precipitation') == '' %}
            {{ state_attr("weather.dark_sky", "forecast") | length }}
          {% else %}
            {% for item in state_attr("weather.dark_sky", "forecast") |
                      default([{}]) %}
              {% if item.datetime == states('sensor.next_precipitation') %}
                {{ loop.index }}
              {% endif %}
            {% endfor %}
          {% endif %}