# * Automations to handle binary sensors -> lights or scripts
#   * https://www.amazon.com/gp/product/B0151Z8ZQY are great sensors

# * An input number for global brightness adjustments

# * script.notify_with_lights ==>> ducks selected lights, useful as an
#   unobtrusive "hey something is happening look at your phone for more"
#   notification

homeassistant:
  customize:
    # Configure which service or entity is triggered when the sensor
    # changes state
    #
    # trigger_service: service
    # trigger_entity_id: entity_id
    # trigger_service_off: service
    # trigger_entity_id_off: entity_id

    binary_sensor.stairs_motion:
      trigger_entity_id: light.stairs
      trigger_entity_id_off: light.stairs
      haunt: light.bookshelf_right
    binary_sensor.upstairs_motion:
      trigger_entity_id: light.stairs
      trigger_entity_id_off: light.stairs
    binary_sensor.closet_motion:
      trigger_entity_id: light.master_closet
      trigger_entity_id_off: light.master_closet
    binary_sensor.guest_hall_motion:
      trigger_entity_id: light.guest_hall
      trigger_entity_id_off: light.guest_hall
      haunt: light.drums
    binary_sensor.guest_bath_motion:
      trigger_entity_id: group.guest_bath_lights
      trigger_entity_id_off: group.guest_bath
      off_delay_seconds: 1800
      haunt: light.drums
    binary_sensor.powder_room_motion:
      trigger_entity_id: light.powder_room
      trigger_entity_id_off: group.powder_room
      haunt: light.drums
    binary_sensor.office_motion:
      trigger_service: script.office_lights
      trigger_entity_id_off: group.office
      off_delay_seconds: 1800
      haunt: light.couch
    binary_sensor.music_room_motion:
      trigger_service: script.music_room
      trigger_entity_id_off: group.music_room
      off_delay_seconds: 1800
    binary_sensor.master_bath_motion:
      trigger_service: script.master_bath_lights
      trigger_entity_id_off: group.master_bath
      off_delay_seconds: 1800
      haunt: light.bookshelf_left
    binary_sensor.wine_room_motion:
      trigger_entity_id: light.wine_room
      trigger_entity_id_off: light.wine_room
    binary_sensor.great_hall_motion:
      trigger_entity_id: light.great_hall
      trigger_entity_id_off: light.great_hall
    binary_sensor.garage_hall_motion:
      trigger_entity_id: light.garage_hall
      trigger_entity_id_off: light.garage_hall
    binary_sensor.yoga_room_motion:
      friendly_name: yoga room motion
      trigger_entity_id: group.yoga_room
      trigger_entity_id_off: group.yoga_room
      off_delay_seconds: 600
      haunt: light.bookshelf_middle
    binary_sensor.great_room_occupied:
      trigger_service: script.living_lights
      trigger_entity_id_off: group.great_room
      haunt: light.bookshelf_right
    binary_sensor.pantry_motion:
      trigger_entity_id: light.pantry
      trigger_entity_id_off: light.pantry
      haunt: light.bookshelf_right
    binary_sensor.record_cabinet_playing:
      trigger_service: script.pulse_record_cabinet_lights

    counter.light_automations:
      unit_of_measurement: occurances

    # fixed_brightness: int
    # TODO: min_brightness
    # notify_action: duck
    # duck_step: int | default(127)
    light.atrium:
      notify_action: duck
      fixed_brightness: 127
    light.bamboo:
      notify_action: duck
      fixed_brightness: 127
      color_temp: 396
    light.front_porch:
      fixed_brightness: 255
    light.front_door:
      fixed_brightness: 255
    light.patio:
      fixed_brightness: 255
    light.ac:
      fixed_brightness: 255
    light.atrium_door:
      notify_action: duck
      fixed_brightness: 255
    light.garage_door:
      fixed_brightness: 255
    light.cabinets:
      fixed_brightness: 255

    light.bookshelf:
      color_temp: 396
    light.keyboard:
      fixed_brightness: 50
    light.striped_lamp:
      color_temp: 396

    light.bedside_table_white:
      ignore_brightness: true
    light.bedside_table_red:
      ignore_brightness: true
    light.bedside_table_green:
      ignore_brightness: true
    light.bedside_table_blue:
      ignore_brightness: true
    light.bedside_table_brightness:
      ignore_brightness: true

    light.back_porch_fountain_white:
      ignore_brightness: true
    light.back_porch_fountain_green:
      ignore_brightness: true
    light.back_porch_fountain_red:
      ignore_brightness: true
    light.back_porch_fountain_blue:
      ignore_brightness: true
    light.back_porch_fountain_brightness:
      ignore_brightness: true

    light.garage_hall:
      notify_action: duck
    light.record_cabinet_left:
      notify_action: duck
    light.record_cabinet_right:
      notify_action: duck

    light.dining_room_table:
      notify_action: duck
      duck_step: 192
    light.exersize_bike:
      notify_action: duck
    light.kitchen:
      notify_action: duck
      duck_step: 192

    light.living:
      notify_action: duck
      duck_step: 192
    light.couch_lamp_right:
      notify_action: duck
      fixed_brightness: 20
    light.couch_lamp_left:
      notify_action: duck
      fixed_brightness: 20

    light.master_bath_overhead:
      notify_action: duck
    light.master_closet:
      notify_action: duck
    light.master_mirror:
      notify_action: duck
    light.master_nook:
      notify_action: duck
    light.master_overhead:
      notify_action: duck
    light.master_patio:
      notify_action: duck
    light.master_shower:
      notify_action: duck
    light.master_toilet:
      notify_action: duck
    light.yoga_room:
      notify_action: duck
    light.office_chandelier:
      notify_action: duck
    light.office_desk_lamp:
      notify_action: duck
      duck_step: 192
    light.office_overhead:
      notify_action: duck
    light.pendants:
      notify_action: duck
      duck_step: 192
    light.wine_room:
      fixed_brightness: 102

binary_sensor:
  - platform: template
    sensors:
      record_cabinet_playing:
        value_template: |
          {{ is_state("media_player.record_cabinet", "playing") }}

automation:
  - alias: Turn on lights when motion is detected
    mode: parallel
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "binary_sensor" and
              trigger.event.data.new_state.state == "on" and (
                trigger.event.data.new_state.attributes.trigger_service is defined or
                trigger.event.data.new_state.attributes.trigger_entity_id is defined
              )
            }}
        - condition: template
          value_template: |
            {{ states.input_select.mode.state != "Away" }}
    action:
      - service_template: |
          {{ trigger.event.data.new_state.attributes.trigger_service | default('homeassistant.turn_on') }}
        data_template:
          entity_id: |
            {{ trigger.event.data.new_state.attributes.trigger_entity_id | default('') }}
          brightness: |
            {{ trigger.event.data.new_state.attributes.fixed_brightness | default(states('input_number.brightness') | int) }}
      - service: system_log.write
        data_template:
          message: >
            at=on
            entity_id={{ trigger.event.data.entity_id }} trigger_service={{ trigger.event.data.new_state.attributes.trigger_service }} trigger_entity_id={{ trigger.event.data.new_state.attributes.trigger_entity_id }}
          logger: packages.lights
          level: info
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Turn off lights after sensors have turned off
    mode: parallel
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "binary_sensor" and
              trigger.event.data.new_state.state == "off" and (
                trigger.event.data.new_state.attributes.trigger_service_off is defined or
                trigger.event.data.new_state.attributes.trigger_entity_id_off is defined
              )
            }}

    action:
      # Emit a custom event including a boolean indicating whether or not to delay.
      - event: lights_motion_sensor_off
        event_data_template:
          entity_id: |
            {{ trigger.event.data.entity_id }}
          delay: |
            {{ states[trigger.event.data.entity_id].attributes.off_delay_seconds | default(0) | int != 0 }}
          # Pass this value along so that we can double check it after delaying
          last_changed: |
            {{ states[trigger.event.data.entity_id].last_changed }}
          event_id: |
            {{ (as_timestamp(now()) * 1000000) | int }}{{ range(0,9999) | random }}

  - alias: Turn off lights immediately
    mode: parallel
    trigger:
      platform: event
      event_type: lights_motion_sensor_off
      event_data:
        delay: "False"
    action:
      - service_template: |
          {{ states[trigger.event.data.entity_id].attributes.trigger_service_off | default('homeassistant.turn_off') }}
        data_template:
          entity_id: |
            {{ states[trigger.event.data.entity_id].attributes.trigger_entity_id_off | default('') }}
      - service: system_log.write
        data_template:
          message: >
            at=off
            entity_id={{ trigger.event.data.entity_id }}
            trigger_service_off={{ states[trigger.event.data.entity_id].attributes.trigger_service_off }}
            trigger_entity_id_off={{ states[trigger.event.data.entity_id].attributes.trigger_entity_id_off }}
          logger: packages.lights
          level: info
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Turn off lights with delay
    mode: parallel
    trigger:
      platform: event
      event_type: lights_motion_sensor_off
      event_data:
        delay: "True"
    action:
      - service: system_log.write
        data_template:
          logger: packages.lights
          level: info
          message: >
            at=delay_start
            event_id={{ trigger.event.data.event_id }}
            entity_id={{ trigger.event.data.entity_id }}
            delay={{ states[trigger.event.data.entity_id].attributes.off_delay_seconds | int | timestamp_custom('%H:%M:%S',False) }}
            event_last_changed={{ trigger.event.data.last_changed }}
      - delay: "{{ ((states[trigger.event.data.entity_id].attributes.off_delay_seconds | int) + 1) | timestamp_custom('%H:%M:%S',False) }}"
      - service: system_log.write
        data_template:
          message: >
            at=delay_end
            event_id={{ trigger.event.data.event_id }}
            entity_id={{ trigger.event.data.entity_id }}
            delay={{ states[trigger.event.data.entity_id].attributes.off_delay_seconds | int | timestamp_custom('%H:%M:%S',False) }}
            utcnow={{ utcnow() }}
            event_last_changed={{ trigger.event.data.last_changed }}
            state_last_changed={{ states[trigger.event.data.entity_id].last_changed }}
            equal={{ as_timestamp(trigger.event.data.last_changed) == as_timestamp(states[trigger.event.data.entity_id].last_changed) }}
            early={{
              (
                as_timestamp(states[trigger.event.data.entity_id].last_changed) + (states[trigger.event.data.entity_id].attributes.off_delay_seconds | int)
              ) > as_timestamp(now())
            }}
            state={{ states(trigger.event.data.entity_id) }}
          logger: packages.lights
          level: info
      # Only continue if:
      # * The sensor is off
      # * It hasn't changed since we started delaying
      # * It has been at least off_delay_seconds since the sensor changed
      - condition: template
        value_template: |
          {{
            is_state(trigger.event.data.entity_id, "off") and
            as_timestamp(trigger.event.data.last_changed) == as_timestamp(states[trigger.event.data.entity_id].last_changed) and
            (
              as_timestamp(states[trigger.event.data.entity_id].last_changed) + (states[trigger.event.data.entity_id].attributes.off_delay_seconds | int)
            ) < as_timestamp(now())
          }}
      - service_template: |
          {{ states[trigger.event.data.entity_id].attributes.trigger_service_off | default('homeassistant.turn_off') }}
        data_template:
          entity_id: |
            {{ states[trigger.event.data.entity_id].attributes.trigger_entity_id_off | default('') }}
      - service: system_log.write
        data_template:
          message: >
            at=off
            event_id={{ trigger.event.data.event_id }}
            entity_id={{ trigger.event.data.entity_id }}
            trigger_service_off={{ states[trigger.event.data.entity_id].attributes.trigger_service_off }}
            trigger_entity_id_off={{ states[trigger.event.data.entity_id].attributes.trigger_entity_id_off }}
          logger: packages.lights
          level: info
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: React to changes of the brightness slider
    mode: queued
    trigger:
      platform: state
      entity_id: input_number.brightness
    action:
      - service: light.turn_on
        data_template:
          entity_id: |
            {%- for l in states.light if (
                l.attributes.is_hue_group is not defined and
                l.attributes.fixed_brightness is not defined and
                l.attributes.ignore_brightness is not defined and
                l.state == "on") -%}
              {{l.entity_id}}{% if not loop.last %}{{ ", " }}{% endif %}
            {%- endfor -%}
          brightness: |
            {{ states('input_number.brightness') | int }}
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Set lights to correct brightness when turned on
    mode: parallel
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.attributes.is_hue_group is not defined
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "light" and
              trigger.event.data.new_state.state == "on" and
              trigger.event.data.new_state.attributes.ignore_brightness is not defined and
              trigger.event.data.new_state.attributes.color_temp is not defined
            }}
        - condition: template
          value_template: |
            {{ trigger.event.data.new_state.attributes.brightness | default(255) !=
              trigger.event.data.new_state.attributes.fixed_brightness | default(states('input_number.brightness') | int) }}
    action:
      - service: light.turn_on
        data_template:
          entity_id: |
            {{ trigger.event.data.new_state.entity_id }}
          brightness: |
            {{ trigger.event.data.new_state.attributes.fixed_brightness | default(states('input_number.brightness') | int) }}
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Set lights to correct color temp when turned on
    mode: parallel
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.attributes.is_hue_group is not defined and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "light" and
              trigger.event.data.new_state.state == "on" and
              trigger.event.data.new_state.attributes.color_temp is defined
            }}
    action:
      - service: light.turn_on
        data_template:
          entity_id: |
            {{ trigger.event.data.new_state.entity_id }}
          color_temp: |
            {{ trigger.event.data.new_state.attributes.color_temp }}
          brightness: |
            {{ trigger.event.data.new_state.attributes.fixed_brightness | default(states('input_number.brightness') | int) }}
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Turn on lights when devices enter zones
    mode: parallel
    trigger:
      platform: state
      entity_id:
      - device_tracker.jphone_11_pro
      - device_tracker.katie_s_iphone
    condition:
      condition: template
      value_template: |
        {{
          trigger.from_state.state != trigger.to_state.state and
          trigger.to_state.attributes.trigger_entity_id is defined
        }}
    action:
      service_template: |
        {{ trigger.to_state.attributes.trigger_service | default('homeassistant.turn_on') }}
      data_template:
        entity_id: |
          {{ trigger.to_state.attributes.trigger_entity_id }}
        brightness: |
          {{ trigger.to_state.attributes.fixed_brightness | default(states('input_number.brightness') | int) }}

  - alias: log light changes to slack
    mode: parallel
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: template
      value_template: |
        {{
          trigger.event.data.new_state.domain == "light" and
          trigger.event.data.old_state != None and
          ( trigger.event.data.new_state.state != trigger.event.data.old_state.state or
            trigger.event.data.new_state.attributes.brightness != trigger.event.data.old_state.attributes.brightness )
        }}
    action:
      service: notify.slack
      data_template:
        message: |
          :bulb: *{{ trigger.event.data.new_state.name | capitalize }}*{{ " " -}}
          {%- if trigger.event.data.new_state.state == "on" -%}
          *_{{ '%0.0f' % ( ( trigger.event.data.new_state.attributes.brightness / 255 | round ) * 100 ) }}%_*
          {%- else -%}
          *_Off_*
          {%- endif -%}{{ " " -}}
          after being{{ " " -}}
          {%- if trigger.event.data.old_state.state == "on" -%}
          {{ '%0.0f' % ( ( trigger.event.data.old_state.attributes.brightness / 255 | round ) * 100 ) }}%
          {%- else -%}
          Off
          {%- endif -%}{{ " " -}}
          for {{ relative_time(trigger.event.data.old_state.last_changed) }}

  - alias: Haunt lights
    mode: parallel
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "binary_sensor" and
              trigger.event.data.new_state.state == "on" and
              trigger.event.data.new_state.attributes.haunt is defined
            }}
        - condition: template
          value_template: |
            {{ states.input_select.mode.state != "Away" }}
    action:
      - service_template: script.haunt
        data_template:
          entity_id: |
            {{ expand(trigger.event.data.new_state.attributes.haunt.split(",")) | selectattr("state", "equalto", "on") | map(attribute="entity_id") | join(",") }}

counter:
  light_automations:
    name: Light Automations

input_number:
  brightness:
    name: Brightness
    min: 0
    max: 255
    step: 1

script:
  living_lights:
    sequence:
      - service: light.turn_on
        data:
          entity_id: light.cabinets
      - condition: template
        value_template: >
          {{ states.input_select.mode.state != "Sleeping" }}
      - service: light.turn_on
        data_template:
          entity_id:
            - light.dining_room_table
            - light.kitchen
            - light.living
            - light.pendants
            - light.couch_lamp_right
            - light.couch_lamp_left
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  master_bath_lights:
    sequence:
      - service: light.turn_on
        data_template:
          entity_id: light.master_toilet
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}
      - condition: template
        value_template: >
          {{ states.input_select.mode.state != "Sleeping" }}
      - service: light.turn_on
        data_template:
          entity_id:
          - light.master_bath_overhead
          - light.master_shower
          - light.master_mirror
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  master_lights:
    sequence:
      - condition: template
        value_template: >
          {{ states.input_select.mode.state not in ["Reading", "Morning"] }}
      - service: homeassistant.turn_on
        data_template:
          entity_id: |
            {{ "light.master_toilet" if states.input_select.mode.state == "Sleeping" else "group.master" }}
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  master_lights_off:
    sequence:
      - condition: template
        value_template: >
          {{ states.input_select.mode.state not in ["Reading", "Morning"] }}
      - service: homeassistant.turn_off
        data_template:
          entity_id: |
            group.master

  music_room:
    sequence:
      - service: light.turn_on
        entity_id: light.bookshelf
        data_template:
          color_temp: |
            {{ states.light.bookshelf.attributes.color_temp | int }}
      - service: light.turn_on
        entity_id: light.striped_lamp
        data_template:
          color_temp: |
            {{ states.light.striped_lamp.attributes.color_temp | int }}
      - service: shell_command.wake_bookshelf

  notify_with_lights:
    sequence:
    - condition: template
      value_template: |
        {{
          states.light |
          selectattr("state", "equalto", "on") |
          selectattr("attributes.notify_action", "equalto", "duck") |
          map(attribute="entity_id") |
          list |
          length > 0
        }}
    - service: script.pulse_light
      data_template:
        entity_id: |
          {{
            states.light |
            selectattr("state", "equalto", "on") |
            selectattr("attributes.notify_action", "equalto", "duck") |
            map(attribute="entity_id") |
            join(', ')
          }}

  office_lights:
    sequence:
      - service: light.turn_on
        data_template:
          entity_id:
          - light.office_closet
          - light.office_overhead
          - light.office_chandelier
          - light.coat_closet
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}
      - condition: template
        value_template: >
          {{ states.input_select.mode.state != "Evening" }}
      - service: light.turn_on
        data_template:
          entity_id:
          - light.office_overhead
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  pulse_light:
    sequence:
    - service: python_script.dim_step
      data_template:
        action: down
        entity_id: |
          {{ entity_id }}
    - delay:
        seconds: 2
    - service: python_script.dim_step
      data_template:
        action: up
        entity_id: |
          {{ entity_id }}

  haunt:
    sequence:
      - service: light.turn_on
        data_template:
          brightness_step_pct: |
            -{{ step | default("25")}}
          entity_id: |
            {{ entity_id }}
      - delay:
          seconds: |
            {{ delay | default("0.5")}}
      - service: light.turn_on
        data_template:
          brightness_step_pct: |
            {{ step | default("25")}}
          entity_id: |
            {{ entity_id }}

  pulse_record_cabinet_lights:
    sequence:
      - service: light.turn_on
        data:
          entity_id: light.record_cabinet_left
          effect: colorloop
      - service: light.turn_on
        data:
          entity_id: light.record_cabinet_right
          effect: colorloop
      - delay:
          seconds: 30
      - service: light.turn_off
        data:
          entity_id: light.record_cabinet_left
      - service: light.turn_off
        data:
          entity_id: light.record_cabinet_right
      - service: light.turn_on
        data:
          entity_id: light.record_cabinet_left
      - service: light.turn_on
        data:
          entity_id: light.record_cabinet_right

shell_command:
  wake_bookshelf: curl -v --retry 3 --retry-max-time 10 --max-time 30 -X POST bookshelf:8686/wake
