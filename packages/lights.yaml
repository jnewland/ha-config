# * Automations to handle binary sensors -> lights or scripts
#   * https://www.amazon.com/gp/product/B0151Z8ZQY are great sensors

# * An input number for global brightness adjustments

# * script.notify_with_lights ==>> ducks selected lights, useful as an
#   unobtrusive "hey something is happening look at your phone for more"
#   notification

homeassistant:
  customize:
    # Configure which service or entity is triggered when the sensor
    # changes state
    #
    # trigger_service: service
    # trigger_entity_id: entity_id
    # trigger_service_off: service
    # trigger_entity_id_off: entity_id

    binary_sensor.master_door:
      haunt: light.bookshelf_right
    binary_sensor.stairs_motion:
      trigger_entity_id: light.stairs
      trigger_entity_id_off: light.stairs
      haunt: light.bookshelf_right
    binary_sensor.upstairs_motion:
      trigger_entity_id: light.stairs
      trigger_entity_id_off: light.stairs
    binary_sensor.closet_motion:
      trigger_entity_id: light.master_closet
      trigger_entity_id_off: light.master_closet
    binary_sensor.guest_hall_motion:
      trigger_entity_id: light.guest_hall
      trigger_entity_id_off: light.guest_hall
      haunt: light.couch
    binary_sensor.guest_bath_motion:
      trigger_entity_id: group.guest_bath_lights
      trigger_entity_id_off: group.guest_bath
      off_delay_seconds: 1800
      haunt: light.couch
    binary_sensor.powder_room_motion:
      trigger_entity_id: light.powder_room
      trigger_entity_id_off: group.powder_room
      haunt: light.drums
    binary_sensor.lounge_motion:
      trigger_service: script.lounge_lights
      trigger_entity_id_off: group.lounge
      off_delay_seconds: 1800
      haunt: light.couch
    binary_sensor.music_room_motion:
      trigger_service: script.music_room
      trigger_entity_id_off: group.music_room
      off_delay_seconds: 1800
    binary_sensor.master_bath_motion:
      trigger_service: script.master_bath_lights
      trigger_entity_id_off: group.master_bath
      off_delay_seconds: 1800
      haunt: light.bookshelf_left
    binary_sensor.wine_room_motion:
      trigger_entity_id: light.wine_room
      trigger_entity_id_off: light.wine_room
    binary_sensor.great_hall_motion:
      trigger_entity_id: light.great_hall
      trigger_entity_id_off: light.great_hall
      haunt: light.drums
    binary_sensor.garage_hall_motion:
      trigger_entity_id: light.garage_hall
      trigger_entity_id_off: light.garage_hall
      haunt: light.drums
    binary_sensor.yoga_room_motion:
      friendly_name: yoga room motion
      trigger_entity_id: group.yoga_room
      trigger_entity_id_off: group.yoga_room
      off_delay_seconds: 600
      haunt: light.bookshelf_middle
    binary_sensor.great_room_occupied:
      trigger_service: script.great_room_lights
      trigger_entity_id_off: group.great_room
      haunt: light.bookshelf_right
    binary_sensor.pantry_motion:
      trigger_entity_id: light.pantry
      trigger_entity_id_off: light.pantry
      haunt: light.bookshelf_right
    binary_sensor.record_cabinet_playing:
      trigger_service: script.pulse_record_cabinet_lights
    binary_sensor.bookshelf_camera_in_use:
      trigger_service: script.red_record_cabinet_lights
      trigger_service_off: script.reset_record_cabinet_lights

    counter.light_automations:
      unit_of_measurement: occurances

    # fixed_brightness: int
    # TODO: min_brightness
    # notify_action: duck
    # duck_step: int | default(127)
    light.atrium:
      notify_action: duck
      fixed_brightness: 127
    light.bamboo:
      notify_action: duck
      fixed_brightness: 127
      fixed_color_temp: 396
    light.front_porch:
      fixed_brightness: 255
    light.front_door:
      fixed_brightness: 255
    light.patio:
      fixed_brightness: 255
    light.ac:
      fixed_brightness: 255
    light.atrium_door:
      notify_action: duck
      fixed_brightness: 255
    light.garage_door:
      fixed_brightness: 255
    light.cabinets:
      fixed_brightness: 255

    light.bookshelf:
      fixed_color_temp: 396
    light.keyboard:
      fixed_brightness: 50
    light.striped_lamp:
      fixed_color_temp: 396

    light.pergola_pendants:
      fixed_brightness: 29

    light.bedside_table_white:
      ignore_brightness: true
    light.bedside_table_red:
      ignore_brightness: true
    light.bedside_table_green:
      ignore_brightness: true
    light.bedside_table_blue:
      ignore_brightness: true
    light.bedside_table_brightness:
      ignore_brightness: true

    light.back_porch_fountain_white:
      ignore_brightness: true
    light.back_porch_fountain_green:
      ignore_brightness: true
    light.back_porch_fountain_red:
      ignore_brightness: true
    light.back_porch_fountain_blue:
      ignore_brightness: true
    light.back_porch_fountain_brightness:
      ignore_brightness: true

    light.garage_hall:
      notify_action: duck
    light.record_cabinet_left:
      notify_action: duck
    light.record_cabinet_right:
      notify_action: duck

    light.dining_room_table:
      notify_action: duck
      duck_step: 192
    light.exersize_bike:
      notify_action: duck
    light.kitchen:
      notify_action: duck
      duck_step: 192

    light.living:
      notify_action: duck
      duck_step: 192
    light.couch_lamp_right:
      notify_action: duck
      fixed_brightness: 20
    light.couch_lamp_left:
      notify_action: duck
      fixed_brightness: 20

    light.master_bath_overhead:
      notify_action: duck
    light.master_closet:
      notify_action: duck
    light.master_mirror:
      notify_action: duck
    light.master_nook:
      notify_action: duck
    light.master_overhead:
      notify_action: duck
    light.master_patio:
      notify_action: duck
    light.master_shower:
      notify_action: duck
    light.master_toilet:
      notify_action: duck
    light.yoga_room:
      notify_action: duck
    light.lounge_chandelier:
      notify_action: duck
    light.lounge_overhead:
      notify_action: duck
    light.pendants:
      notify_action: duck
      duck_step: 192
    light.wine_room:
      fixed_brightness: 102

    light.kitchen_light:
      ignore_brightness: true

binary_sensor:
  - platform: template
    sensors:
      record_cabinet_playing:
        value_template: |
          {{ is_state("media_player.record_cabinet", "playing") }}

automation:
  - alias: Turn on lights when motion is detected
    mode: parallel
    id: 429d9193-1b9e-4252-ba42-f3e36ed2d6f9
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "binary_sensor" and
              trigger.event.data.new_state.state == "on" and (
                state_attr(trigger.event.data.new_state.entity_id, 'trigger_service') is defined or
                state_attr(trigger.event.data.new_state.entity_id, 'trigger_entity_id') is defined
              )
            }}
        - condition: template
          value_template: |
            {{ states.input_select.mode.state != "Away" }}
    action:
      - service: >
          {{ state_attr(trigger.event.data.new_state.entity_id, 'trigger_service') | default('homeassistant.turn_on') }}
        data:
          entity_id: |
            {{ state_attr(trigger.event.data.new_state.entity_id, 'trigger_entity_id') | default('') }}
          brightness: |
            {{ state_attr(trigger.event.data.new_state.entity_id, 'fixed_brightness') | default(states('input_number.brightness') | int) }}
      - service: system_log.write
        data:
          message: >
            at=on
            entity_id={{ trigger.event.data.entity_id }} trigger_service={{ state_attr(trigger.event.data.new_state.entity_id, 'trigger_service') }} trigger_entity_id={{ state_attr(trigger.event.data.new_state.entity_id, 'trigger_entity_id') }}
          logger: packages.lights
          level: debug
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Turn off lights after sensors have turned off
    mode: parallel
    id: 9c61fca8-f391-43f0-9766-460006d47777
    trigger:
      platform: event
      event_type: state_changed
    condition: |
      {{
        trigger.event.data.old_state != None and
        trigger.event.data.new_state.state != trigger.event.data.old_state.state and
        trigger.event.data.new_state.domain == "binary_sensor" and
        trigger.event.data.new_state.state == "off" and (
          state_attr(trigger.event.data.new_state.entity_id, 'trigger_service_off') is defined or
          state_attr(trigger.event.data.new_state.entity_id, 'trigger_entity_id_off') is defined
        )
      }}
    action:
      # Emit a custom event including a boolean indicating whether or not to delay.
      - event: lights_motion_sensor_off
        event_data:
          entity_id: |
            {{ trigger.event.data.entity_id }}
          delay: |
            {{ state_attr(trigger.event.data.entity_id, 'off_delay_seconds') | default(0) | int != 0 }}
          # Pass this value along so that we can double check it after delaying
          last_changed: |
            {{ states[trigger.event.data.entity_id].last_changed }}
          event_id: |
            {{ (as_timestamp(now()) * 1000000) | int }}{{ range(0,9999) | random }}

  - alias: Turn off lights immediately
    mode: parallel
    id: 314ca48b-e8e4-4c17-b7ee-9ad0affd1e4a
    trigger:
      platform: event
      event_type: lights_motion_sensor_off
      event_data:
        delay: false
    action:
      - service: >
          {{ state_attr(trigger.event.data.entity_id, 'trigger_service_off') | default('homeassistant.turn_off') }}
        data:
          entity_id: |
            {{ state_attr(trigger.event.data.entity_id, 'trigger_entity_id_off') | default('') }}
      - service: system_log.write
        data:
          message: >
            at=off
            entity_id={{ trigger.event.data.entity_id }}
            trigger_service_off={{ state_attr(trigger.event.data.entity_id, 'trigger_service_off') }}
            trigger_entity_id_off={{ state_attr(trigger.event.data.entity_id, 'trigger_entity_id_off') }}
          logger: packages.lights
          level: debug
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Turn off lights with delay
    mode: parallel
    id: 094daa86-4eb7-469d-bd9c-6f7176287ff2
    trigger:
      platform: event
      event_type: lights_motion_sensor_off
      event_data:
        delay: true
    action:
      - service: system_log.write
        data:
          logger: packages.lights
          level: debug
          message: >
            at=delay_start
            event_id={{ trigger.event.data.event_id }}
            entity_id={{ trigger.event.data.entity_id }}
            delay={{ state_attr(trigger.event.data.entity_id, 'off_delay_seconds') | int | timestamp_custom('%H:%M:%S',False) }}
            event_last_changed={{ trigger.event.data.last_changed }}
      - delay: "{{ ((state_attr(trigger.event.data.entity_id, 'off_delay_seconds') | int) + 1) | timestamp_custom('%H:%M:%S',False) }}"
      - service: system_log.write
        data:
          message: >
            at=delay_end
            event_id={{ trigger.event.data.event_id }}
            entity_id={{ trigger.event.data.entity_id }}
            delay={{ state_attr(trigger.event.data.entity_id, 'off_delay_seconds') | int | timestamp_custom('%H:%M:%S',False) }}
            utcnow={{ utcnow() }}
            event_last_changed={{ trigger.event.data.last_changed }}
            state_last_changed={{ states[trigger.event.data.entity_id].last_changed }}
            equal={{ as_timestamp(trigger.event.data.last_changed) == as_timestamp(states[trigger.event.data.entity_id].last_changed) }}
            early={{
              (
                as_timestamp(states[trigger.event.data.entity_id].last_changed) + (state_attr(trigger.event.data.entity_id, 'off_delay_seconds') | int)
              ) > as_timestamp(now())
            }}
            state={{ states(trigger.event.data.entity_id) }}
          logger: packages.lights
          level: debug
      # Only continue if:
      # * The sensor is off
      # * It hasn't changed since we started delaying
      # * It has been at least off_delay_seconds since the sensor changed
      - condition: template
        value_template: |
          {{
            is_state(trigger.event.data.entity_id, "off") and
            as_timestamp(trigger.event.data.last_changed) == as_timestamp(states[trigger.event.data.entity_id].last_changed) and
            (
              as_timestamp(states[trigger.event.data.entity_id].last_changed) + (state_attr(trigger.event.data.entity_id, 'off_delay_seconds') | int)
            ) < as_timestamp(now())
          }}
      - service: >
          {{ state_attr(trigger.event.data.entity_id, 'trigger_service_off') | default('homeassistant.turn_off') }}
        data:
          entity_id: |
            {{ state_attr(trigger.event.data.entity_id, 'trigger_entity_id_off') | default('') }}
      - service: system_log.write
        data:
          message: >
            at=off
            event_id={{ trigger.event.data.event_id }}
            entity_id={{ trigger.event.data.entity_id }}
            trigger_service_off={{ state_attr(trigger.event.data.entity_id, 'trigger_service_off') }}
            trigger_entity_id_off={{ state_attr(trigger.event.data.entity_id, 'trigger_entity_id_off') }}
          logger: packages.lights
          level: debug
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: React to changes of the brightness slider
    mode: queued
    id: 65a92bfe-d4a4-4663-a023-c0b4aaee12ee
    trigger:
      platform: state
      entity_id: input_number.brightness
    action:
      - service: light.turn_on
        data:
          entity_id: |
            {%- for l in states.light if (
                state_attr(l.entity_id, 'is_hue_group') is not defined and
                state_attr(l.entity_id, 'fixed_brightness') is not defined and
                state_attr(l.entity_id, 'ignore_brightness') is not defined and
                l.state == "on") -%}
              {{l.entity_id}}{% if not loop.last %}{{ ", " }}{% endif %}
            {%- endfor -%}
          brightness: |
            {{ states('input_number.brightness') | int }}
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Set lights to correct brightness when turned on
    mode: parallel
    id: d6f32aaa-155b-46e7-97c4-0079c373a249
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              state_attr(trigger.event.data.new_state.entity_id, 'is_hue_group') is not defined and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "light" and
              trigger.event.data.new_state.state == "on" and
              state_attr(trigger.event.data.new_state.entity_id, 'ignore_brightness') is not defined and
              state_attr(trigger.event.data.new_state.entity_id, 'fixed_color_temp') is not defined
            }}
        - condition: template
          value_template: |
            {{ state_attr(trigger.event.data.new_state.entity_id, 'brightness') | default(255) !=
              state_attr(trigger.event.data.new_state.entity_id, 'fixed_brightness') | default(states('input_number.brightness') | int) }}
    action:
      - service: light.turn_on
        data:
          entity_id: |
            {{ trigger.event.data.new_state.entity_id }}
          brightness: |
            {{ state_attr(trigger.event.data.new_state.entity_id, 'fixed_brightness') | default(states('input_number.brightness') | int) }}
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Set lights to correct color temp when turned on
    mode: parallel
    id: 38a8b2e3-85d2-48b3-8a38-2c1f7ccfdd50
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              state_attr(trigger.event.data.new_state.entity_id, 'is_hue_group') is not defined and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "light" and
              trigger.event.data.new_state.state == "on" and
              state_attr(trigger.event.data.new_state.entity_id, 'fixed_color_temp') is defined
            }}
    action:
      - service: light.turn_on
        data:
          entity_id: |
            {{ trigger.event.data.new_state.entity_id }}
          color_temp: |
            {{ state_attr(trigger.event.data.new_state.entity_id, 'fixed_color_temp') }}
          brightness: |
            {{ state_attr(trigger.event.data.new_state.entity_id, 'fixed_brightness') | default(states('input_number.brightness') | int) }}
      - service: counter.increment
        entity_id: counter.light_automations

  - alias: Turn on lights when devices enter zones
    mode: parallel
    id: 7bff781f-10e6-4a38-9701-7dc2638c4515
    trigger:
      platform: state
      entity_id:
      - device_tracker.jphone_12
      - device_tracker.katie_s_iphone
    condition:
      condition: template
      value_template: |
        {{
          trigger.from_state.state != trigger.to_state.state and
          state_attr(trigger.to_state.entity_id, 'trigger_entity_id') is defined
        }}
    action:
      service: >
        {{ state_attr(trigger.to_state.entity_id, 'trigger_service') | default('homeassistant.turn_on') }}
      data:
        entity_id: |
          {{ state_attr(trigger.to_state.entity_id, 'trigger_entity_id') }}
        brightness: |
          {{ state_attr(trigger.to_state.entity_id, 'fixed_brightness') | default(states('input_number.brightness') | int) }}

  - alias: log light changes to slack
    mode: parallel
    id: 85753078-89dd-4750-840e-13ef98cd4216
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: template
      value_template: |
        {{
          trigger.event.data.new_state.domain == "light" and
          trigger.event.data.old_state != None and
          ( trigger.event.data.new_state.state != trigger.event.data.old_state.state or
            state_attr(trigger.event.data.new_state.entity_id, 'brightness') != state_attr(trigger.event.data.old_state.entity_id, 'brightness') )
        }}
    action:
      service: notify.slack
      data:
        title: ':bulb:'
        message: |
          :bulb: *{{ trigger.event.data.new_state.name | capitalize }}*{{ " " -}}
          {%- if trigger.event.data.new_state.state == "on" -%}
          *_{{ '%0.0f' % ( ( state_attr(trigger.event.data.new_state.entity_id, 'brightness') / 255 | round ) * 100 ) }}%_*
          {%- else -%}
          *_Off_*
          {%- endif -%}{{ " " -}}
          after being{{ " " -}}
          {%- if trigger.event.data.old_state.state == "on" -%}
          {{ '%0.0f' % ( ( state_attr(trigger.event.data.old_state.entity_id, 'brightness') / 255 | round ) * 100 ) }}%
          {%- else -%}
          Off
          {%- endif -%}{{ " " -}}
          for {{ relative_time(trigger.event.data.old_state.last_changed) }}

  - alias: Haunt lights
    mode: parallel
    id: 633ab695-cce9-4f15-a8dc-d21b2a303419
    trigger:
      platform: event
      event_type: state_changed
    condition:
      condition: and
      conditions:
        - condition: template
          value_template: |
            {{
              trigger.event.data.old_state != None and
              trigger.event.data.new_state.state != trigger.event.data.old_state.state and
              trigger.event.data.new_state.domain == "binary_sensor" and
              trigger.event.data.new_state.state == "on" and
              state_attr(trigger.event.data.new_state.entity_id, 'haunt') is defined
            }}
        - condition: template
          value_template: |
            {{ states.input_select.mode.state != "Away" }}
    action:
      - service: script.haunt
        data:
          entity_id: |
            {{ expand(state_attr(trigger.event.entity_id, 'haunt').split(",")) | selectattr("state", "equalto", "on") | map(attribute="entity_id") | join(",") }}

counter:
  light_automations:
    name: Light Automations

light:
  - platform: template
    lights:
      global_brightness:
        friendly_name: "Global Brightness"
        level_template: "{{ states('input_number.brightness')|int }}"
        value_template: "{{ states('input_number.brightness')|int > 0 }}"
        turn_on:
          service: input_number.set_value
          data:
            entity_id: input_number.brightness
            value: 255
        turn_off:
          service: input_number.set_value
          data:
            entity_id: input_number.brightness
            value: 0
        set_level:
          service: input_number.set_value
          data:
            entity_id: input_number.brightness
            value: "{{ brightness }}"

input_number:
  brightness:
    name: Brightness
    min: 0
    max: 255
    step: 1

script:
  great_room_lights:
    sequence:
      - service: scene.turn_on
        data:
          entity_id: >
            scene.great_room_{{ states.input_select.mode.state | lower }}
          transition: >
            {{ "5" if states.input_select.mode.state in ["Evening", "Cocktail", "Cooking"] else "0.1" }}
  mode_cocktail:
    sequence:
    - service: input_select.select_option
      entity_id: input_select.mode
      data:
        option: Cocktail
    - service: script.turn_on
      entity_id: script.great_room_lights
  mode_cooking:
    sequence:
    - service: input_select.select_option
      entity_id: input_select.mode
      data:
        option: Cooking
    - service: script.turn_on
      entity_id: script.great_room_lights
  mode_day:
    sequence:
    - service: input_select.select_option
      entity_id: input_select.mode
      data:
        option: Day
    - service: script.turn_on
      entity_id: script.great_room_lights



  master_bath_lights:
    sequence:
      - service: light.turn_on
        data:
          entity_id: light.master_toilet
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}
      - condition: template
        value_template: >
          {{ states.input_select.mode.state != "Sleeping" }}
      - service: light.turn_on
        data:
          entity_id:
          - light.master_bath_overhead
          - light.master_shower
          - light.master_mirror
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  master_lights:
    sequence:
      - condition: template
        value_template: >
          {{ states.input_select.mode.state not in ["Reading", "Morning"] }}
      - service: homeassistant.turn_on
        data:
          entity_id: |
            {{ "light.master_toilet" if states.input_select.mode.state == "Sleeping" else "group.master" }}
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  master_lights_off:
    sequence:
      - condition: template
        value_template: >
          {{ states.input_select.mode.state not in ["Reading", "Morning"] }}
      - service: homeassistant.turn_off
        data:
          entity_id: |
            group.master

  music_room:
    sequence:
      - service: light.turn_on
        entity_id: light.bookshelf
        data:
          color_temp: |
            {{ state_attr('light.bookshelf', 'fixed_color_temp') | int }}
      - service: light.turn_on
        entity_id: light.striped_lamp
        data:
          color_temp: |
            {{ state_attr('light.striped_lamp', 'fixed_color_temp') | int }}
      - service: light.turn_on
        entity_id: light.music_room_haiku_light
      - service: shell_command.wake_bookshelf

  notify_with_lights:
    sequence:
    - condition: template
      value_template: |
        {{
          states.light |
          selectattr("state", "equalto", "on") |
          selectattr("attributes.notify_action", "equalto", "duck") |
          map(attribute="entity_id") |
          list |
          length > 0
        }}
    - service: script.pulse_light
      data:
        entity_id: |
          {{
            states.light |
            selectattr("state", "equalto", "on") |
            selectattr("attributes.notify_action", "equalto", "duck") |
            map(attribute="entity_id") |
            join(', ')
          }}

  lounge_lights:
    sequence:
      - service: light.turn_on
        data:
          entity_id:
          - light.lounge_overhead
          - light.lounge_chandelier
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}
      - service: switch.turn_on
        data:
          entity_id:
          - switch.lounge_left
      - service: switch.turn_on
        data:
          entity_id:
          - switch.lounge_right
      - condition: template
        value_template: >
          {{ states.input_select.mode.state != "Evening" }}
      - service: light.turn_on
        data:
          entity_id:
          - light.lounge_overhead
          brightness: |
            {{ brightness | default(states('input_number.brightness') | int) }}

  pulse_light:
    sequence:
    - service: python_script.dim_step
      data:
        action: down
        entity_id: |
          {{ entity_id }}
    - delay:
        seconds: 2
    - service: python_script.dim_step
      data:
        action: up
        entity_id: |
          {{ entity_id }}

  haunt:
    sequence:
      - condition: template
        value_template: |
          {{ states(entity_id) != "unknown" }}
      - service: light.turn_on
        data:
          brightness_step_pct: |
            -{{ step | default("50")}}
          entity_id: |
            {{ entity_id }}
      - delay:
          seconds: |
            {{ delay | default("1")}}
      - service: light.turn_on
        data:
          brightness_step_pct: |
            {{ step | default("50")}}
          entity_id: |
            {{ entity_id }}

  reset_record_cabinet_lights:
    sequence:
      - service: light.turn_off
        data:
          entity_id:
            - light.record_cabinet_left
            - light.record_cabinet_right
      - delay:
          seconds: 1
      - service: light.turn_on
        data:
          color_temp: 396
          entity_id:
            - light.record_cabinet_left
            - light.record_cabinet_right

  pulse_record_cabinet_lights:
    sequence:
      - service: light.turn_on
        data:
          entity_id:
            - light.record_cabinet_left
            - light.record_cabinet_right
          effect: colorloop
      - delay:
          seconds: 30
      - service: script.reset_record_cabinet_lights

  red_record_cabinet_lights:
    sequence:
      - service: light.turn_on
        data:
          color_name: red
          entity_id:
            - light.record_cabinet_left
            - light.record_cabinet_right

shell_command:
  wake_bookshelf: curl -s --retry 3 --retry-max-time 10 --max-time 30 -X POST bookshelf:8686/wake
